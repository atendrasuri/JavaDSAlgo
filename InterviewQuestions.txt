
Asked in Amazon:-
1. Check for balanced parentheses in an expression.
2. Evaluate the Infix expression(also convert infix expression to postfix).
3. Given an Array of positive and negative integer, find out the sub-array whose sum is zero.
4. Given a Binary tree, print the boundary  elements in anti-clock wise directions.
5. Given array of strings, find out the maximum product.(if any of the two strings contains at least one character then don't consider it).
6. Delete the node from BST which are out of given range(min, max).
7. Given and array of integer from 1 to N, some numbers are repeating and some numbers are missing. find out the repeating and missing numbers without any extra space.


Asked in Oracle:-
1. Can we create the object of static class?
2. Is it possible to create the object of abstract class?
3. Given two Arrays of integers, find out the missing elements from 2nd array.
4. Rotate the 2-D matrix through 90 degree.
5. Given numbers from 1 to N, but there is only one element missing. Then find out the missing element.

Asked in Informatica:-
1. Given two linked list, write a function which add the Node of second linked list to first linked list in alternate node.

2. Find the longest substring which has all the unique characters.

Asked in Wissen:-

Asked in Synechrone:-



Asked in LensKart:-

1. Given a binary tree, print the vertical sum of each vertical line.
2. Given a sentence of words. reverse the sentence without using library function and extra space.
3. Given an array of N integers, find the largest element of k sub-arrays.
  Example:- 10, 5, 40, 12, 25, 75, 9 and K=3
  10, 5, 40-> 40,
  5, 40, 12-> 40,
  40, 12, 25-> 40,
  12, 25, 75-> 75,
  25, 75, 9-> 75

4. Given height of N person in an array and only person who can handover the movie ticket, who is next taller.
5. Check whether given Binary tree is BST(Binary search tree) or not?
6. Clone the linked list to another linked list.


Arrays:-
1. Find the repeating and the missing.
   Objective:- Given an unsorted array of size n.
   Array elements are in range from 1 to n. One number from set {1, 2, …n} is missing and one number occurs twice in array.
2. Find first three largest elements in a given array
3. Print all Unique elements in a given array.
4. Rotate the given array in cycles
    Example: Int a [] = {1, 2, 3, 4, 5} Output:  {2, 3, 4, 5, 1}
5. Count and print all Subarrays with product less than K in O(n)
6. Sliding Window Algorithm (Track the maximum of each subarray of size k)
    int [] nums = { 1, 2, 3, 2, 4, 1, 5, 6,1};
    Output: 3, 3, 4, 4, 5, 6, 6
7. Print all sub sequences of a given array.

8. Nuts & Bolts Problem (Lock & Key problem)
  Objective:  Given ‘n’ Nuts and ‘n’ Bolts of different sizes. There is one-to-one mapping between nuts and bolts.
   Write an algorithm to find all matches between nuts and bolts.

9. Find two non-repeating numbers in an array in O(n) time and O(1) space.
   Examples:- int [] arrA = {4,5,4,5,3,2,9,3,9,8};
              Output: 2 and 8
10. Separate even and odd integers in a given array.
11. Find three elements in an array that sum to a zero.
12. Separate 0’s and 1’s in a given array.
13. Find the first non repeating character in a given string.
    Example:-
    String input = " tutorial horizon"
    Output: 'u'
    String input = "aabbccadd"
    Output: No non-repeating character found.

14. Maximum Subarray sum Problem.
   Example:- int [] A = {−2, 1, −3, 4, −1, 2, 1, −5, 4};
             Output: contiguous subarray with the largest sum is 4, −1, 2, 1, with sum 6.

15. Leader Element in the array.
16. Majority element in the array.
17. Pythagorian triplet in an array.
18. Implement two stack in an array.

19. Find two elements in an array whose sum is closet to given sum K.
20. Print all distinct elements of given integer array.
21.


Linked List:-

1. Implementation of singly Linked List(Insert/Update/Delete/traverse).
2. Implementation of Doubly Linked List(Insert/Update/Delete/traverse).
3. Implementation of circular Linked List(Insert/Update/Delete/traverse).
4. Least Recently Used (LRU) Cache – Using HashMap and Doubly Linked List.
5. Swap Nodes in pairs in a Linked List by changing links.
6. Reverse a singly linked list.
7. Reverse a Linked List in groups of given size ‘K’.
8. Swap Kth Node from the front with the Kth Node from the End.
9. Merge a Linked list into another Linked List at Alternate Positions.
10. Find the n’th Node from the end of a given Linked List.
11. Remove Duplicates from an Unsorted Linked list.
12. Find Intersection Point in Two Linked List.
13. Find the Loop in a Linked list, find its length and Break the Loop.
14. Find the middle node in a linked list and print it's data.
15. Function to check if a singly linked list is palindrome.
16. Segregate even and odd nodes in a Linked List.
17. Remove every k-th node of the linked list.
18. Clone a linked list with next and random pointer in O(1) space.
19. Find the Kth Smallest/Largest Element in an Array.
20. Generate Maximum revenue by selling K tickets from N windows.


Stacks:-
1. Implement Stack Using Linked List.
2. Given N number in an array find the next greater element for every elements.
3. Implement Min stack.
4. Validate parenthesis of a given expression.
5. Evaluate Expression using reverse polish notation.
6. Maximum rectangular area in histogram.



Binary Tree:-
==========traversal====================
1. Inorder traversal without recursion.
2. Preorder traversal without recursion.
3. Postorder traversal without recursion.

4. Check whether a given Binary Tree is a valid BinarySearch tree.
5. Find height of the Binary tree.
6. Find Diameter of Binary tree.
==============print view =====================
7. Level order traversal of the binary tree.
8. print left view of the binary tree.
9. print right view of the binary tree.
10. Print boundary view of the binary tree(in anti-clockwise direction).
11. Print top view of the binary tree.
12. Print bottom view of the binary tree.

13. Vertical sum of the Binary tree.
14. count total number of leaves nodes present in the binary tree.
15. Check if Two BST’s are Identical.
16. Delete all the node from BST which is out of given range[ min, max].
17. Print All Paths From Root In a Binary Tree Whose Sum is Equal to a Given Number.
18. print mirror image of the binary tree.
19. Check If One Binary is Mirror Tree of another Binary Tree.
20. Print All The Nodes Which are X distance from the Root.
21. Inorder predecessor and successor of binary tree.
22. Sorted array to Balanced BST.
23. Print nodes between two given level of binary tree.
24. print nodes at K distance from root.
25. Find distance from root to given nodes in the binary tree.
26. Change a Binary tree so that every node store the sum of all nodes in its left.
27. Check if a binary tree is subtree of another binary subtree.
28. Kth Largest/smallest element in a binary tree.



Dynamic Programming:-

1. Longest common Subsequence
  Example:- LCS for input Sequences “ABCDGH” and “AEDFHR” is “ADH” of length 3.
            LCS for input Sequences “AGGTAB” and “GXTXAYB” is “GTAB” of length 4.

2. Edit Distance
   Given two strings str1 and str2 and below operations that can performed on str1. Find minimum number of edits (operations) required to convert ‘str1’ into ‘str2’.

   Example:- Input:   str1 = "geek", str2 = "gesek"
             Output:  1
             We can convert str1 into str2 by inserting a 's'.

3. Longest Palindromic Subsequence:-
  Example:- if the given sequence is “BBABCBCAB”, then the output should be 7 as “BABCBAB” is the longest palindromic subseuqnce in it.
  “BBBBB” and “BBCBB” are also palindromic subsequences of the given sequence, but not the longest ones.



4. Maximum Path sum Matrix:-
   The maximum path is sum of all elements from first row to last row where you are allowed to move only down or diagonally to left or right.
   You can start from any element in first row.

   Example:- Input : mat[][] = 10 10  2  0 20  4
                                1  0  0 30  2  5
                                0 10  4  0  2  0
                                1  0  2 20  0  4
             Output : 74
             The maximum sum path is 20-30-4-20.


5. Minimum Cost Path:-
     Given a cost matrix cost[][] and a position (m, n) in cost[][], write a function that returns cost of minimum cost path to reach (m, n) from (0, 0).
    * Each cell of the matrix represents a cost to traverse through that cell. Total cost of a path to reach (m, n) is sum of all the costs on that path (including both source and destination).
    * You can only traverse down, right and diagonally lower cells from a given cell, i.e., from a given cell (i, j), cells (i+1, j), (i, j+1) and (i+1, j+1) can be traversed.
    * You may assume that all costs are positive integers.

6. 0-1 Knapsack Problem:-
    Given weights and values of n items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack.
    In other words, given two integer arrays val[0..n-1] and wt[0..n-1] which represent values and weights associated with n items respectively.
    Also given an integer W which represents knapsack capacity, find out the maximum value subset of val[] such that sum of the weights of this subset is smaller than or equal to W.
    You cannot break an item, either pick the complete item, or don’t pick it (0-1 property).


7. Cutting a Rod:-
   Given a rod of length n inches and an array of prices that contains prices of all pieces of size smaller than n.
   Determine the maximum value obtainable by cutting up the rod and selling the pieces.
   For example, if length of the rod is 8 and the values of different pieces are given as following, then the maximum obtainable value is 22 (by cutting in two pieces of lengths 2 and 6)



8. Maximum Subarray Problem:-
  The maximum subarray problem is the task of finding the contiguous subarray within a one-dimensional array of numbers which has the largest sum.

  int [] A = {−2, 1, −3, 4, −1, 2, 1, −5, 4};

  Output: contiguous subarray with the largest sum is 4, −1, 2, 1, with sum 6.

9. Minimum Jumps to reach to end of the Array
   Objective:  Given an array of non negative integers, start from the first element and reach the last by jumping.
               The jump length can be at most the value at the current position in the array. Optimum result is when you reach the goal in minimum number of jumps.


   Example:-
   Given array A = {2,3,1,1,4}
   possible ways to reach the end (index list)
   i) 0,2,3,4 (jump 2 to index 2, then jump 1 to index 3 then 1 to index 4)
   ii) 0,1,4 (jump 1 to index 1, then jump 3 to index 4)

   Since second solution has only 2 jumps it is the optimum result.

10. Maximum size square sub-matrix with all 1s.  - done
    Objective: Given a matrix of 0’s and 1’s (binary matrix). Find out Maximum size square sub-matrix with all 1’s.

11. Coin change problem.

12 . Dynamic Programming – Count all paths in 2D Matrix with Obstructions in it
     Objective: Given two dimensional matrix, write an algorithm to count all possible paths from top left corner to bottom-right corner. You are allowed to move only in two directions, move right OR move down.
     There are few obstructions as well, means few cells are blocked and you cannot travel that cell.

13. Egg dropping problem -- not done

14. Travel salesman problem.

15. Job scheduling problem.

16. Maximum sum Rectangular submatrix in matrix.-- done

17. Trapping rain water problem. -- done



Resources:-
Codechefs
Leetcode
Codeforces
InterviewBit
**AlgoExpert
